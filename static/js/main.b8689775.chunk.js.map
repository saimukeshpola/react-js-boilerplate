{"version":3,"sources":["components/Splash/Splash.tsx","reportWebVitals.ts","components/Splash/logo.svg","redux/actionTypes.ts","pages/Home.tsx","redux/actions.ts","redux/reducers/greeting.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["GREETIN_ACTION","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StyledActionWrapper","styled","div","Splash","forwardRef","props","ref","message","onGreetingChange","className","src","logo","alt","onClick","MORNING","AFTERNOON","NIGHT","SAY_GOOD_MORNING","SAY_GOOD_AFTERNOON","SAY_GOOD_NIGHT","connector","connect","state","greeting","dispatch","useDispatch","greetingAction","type","generateGreeting","initialState","GreetingReducer","action","combineReducers","createStore","rootReducer","composeWithDevTools","ReactDOM","render","StrictMode","store","path","Home","document","getElementById"],"mappings":"sLAMYA,E,wCCQGC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,+CCTC,MAA0B,iC,oLFM7BF,O,qBAAAA,I,yBAAAA,I,kBAAAA,M,KAWZ,IAAMU,EAAsBC,IAAOC,IAAV,KAQZC,EAA+CC,sBAC1D,SAACC,EAAqCC,GAA6B,IACzDC,EAA8BF,EAA9BE,QAASC,EAAqBH,EAArBG,iBACjB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACxCL,EACD,eAACP,EAAD,WACE,cAAC,IAAD,CAAQa,QAAS,kBAAML,EAAiBlB,EAAewB,UAAvD,qBAGA,cAAC,IAAD,CAAQD,QAAS,kBAAML,EAAiBlB,EAAeyB,YAAvD,uBAGA,cAAC,IAAD,CAAQF,QAAS,kBAAML,EAAiBlB,EAAe0B,QAAvD,8BGxCCC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAAiB,iBCyCfC,EA7BGC,aALM,SAACC,GAAsB,IACrCC,EAAaD,EAAbC,SACR,OAAO,eAAKA,KAgCCH,EAzBE,SAACf,GAA0B,IAClCE,EAAYF,EAAZE,QACFiB,EAAWC,cACjB,OACE,cAAC,EAAD,CACElB,QAASA,EACTC,iBAAkB,SAACkB,GACjB,OAAQA,GACN,KAAKpC,EAAewB,QAClBU,ECrByB,CACnCG,KAAMV,IDqBI,MACF,KAAK3B,EAAeyB,UAClBS,ECrB2B,CACrCG,KAAMT,IDqBI,MACF,KAAK5B,EAAe0B,MAClBQ,ECrBuB,CACjCG,KAAMR,W,QCNFS,EAAmB,SAACD,GACxB,MAAM,eAAN,OAAsBA,EAAtB,+BAGIE,EAA8B,CAClCtB,QAASqB,EAAiB,YA+BbE,EA5BS,WAGlB,IAFJR,EAEG,uDAFoBO,EACvBE,EACG,uCACH,OAAQA,EAAOJ,MACb,KAAKV,EACH,OAAO,2BACFK,GADL,IAEEf,QAASqB,EAAiB,aAG9B,KAAKV,EACH,OAAO,2BACFI,GADL,IAEEf,QAASqB,EAAiB,eAG9B,KAAKT,EACH,OAAO,2BACFG,GADL,IAEEf,QAASqB,EAAiB,WAG9B,QACE,OAAON,ICpCEU,4BAAgB,CAAET,a,QCClBU,wBAAYC,EAAaC,iC,MCMxCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAACC,EAAD,cAMVC,SAASC,eAAe,SAM1BpD,M","file":"static/js/main.b8689775.chunk.js","sourcesContent":["import { forwardRef, PropsWithoutRef, Ref } from \"react\";\nimport styled from \"styled-components\";\nimport logo from \"./logo.svg\";\nimport \"./Splash.css\";\nimport { Button } from \"antd\";\n\nexport enum GREETIN_ACTION {\n  MORNING,\n  AFTERNOON,\n  NIGHT,\n}\nexport interface SplashProps {\n  ref?: Ref<HTMLElement>;\n  message?: string;\n  onGreetingChange: (greetingAction: GREETIN_ACTION) => void;\n}\n\nconst StyledActionWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  > button {\n    margin: 0.25rem;\n  }\n`;\n\nexport const Splash: React.FunctionComponent<SplashProps> = forwardRef(\n  (props: PropsWithoutRef<SplashProps>, ref: SplashProps[\"ref\"]) => {\n    const { message, onGreetingChange } = props;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {message}\n          <StyledActionWrapper>\n            <Button onClick={() => onGreetingChange(GREETIN_ACTION.MORNING)}>\n              Morning\n            </Button>\n            <Button onClick={() => onGreetingChange(GREETIN_ACTION.AFTERNOON)}>\n              Afternoon\n            </Button>\n            <Button onClick={() => onGreetingChange(GREETIN_ACTION.NIGHT)}>\n              Night\n            </Button>\n          </StyledActionWrapper>\n        </header>\n      </div>\n    );\n  }\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const SAY_GOOD_MORNING = \"SAY_GOOD_MORNING\";\nexport const SAY_GOOD_AFTERNOON = \"SAY_GOOD_AFTERNOON\";\nexport const SAY_GOOD_NIGHT = \"SAY_GOOD_NIGHT\";\n","import { connect, ConnectedProps, useDispatch } from \"react-redux\";\nimport { GREETIN_ACTION, Splash } from \"../components/Splash/Splash\";\nimport {\n  sayGoodAfterNoon,\n  sayGoodMorning,\n  sayGoodNight,\n} from \"../redux/actions\";\nimport { DataStore } from \"../redux/redux-store.types\";\n\nconst mapStateToProps = (state: DataStore) => {\n  const { greeting } = state;\n  return { ...greeting };\n};\n\nconst connector = connect(mapStateToProps);\n\ninterface HomePageProps extends ConnectedProps<typeof connector> {}\n\nconst HomePage = (props: HomePageProps) => {\n  const { message } = props;\n  const dispatch = useDispatch();\n  return (\n    <Splash\n      message={message}\n      onGreetingChange={(greetingAction) => {\n        switch (greetingAction) {\n          case GREETIN_ACTION.MORNING:\n            dispatch(sayGoodMorning());\n            break;\n          case GREETIN_ACTION.AFTERNOON:\n            dispatch(sayGoodAfterNoon());\n            break;\n          case GREETIN_ACTION.NIGHT:\n            dispatch(sayGoodNight());\n            break;\n          default:\n            break;\n        }\n      }}\n    />\n  );\n};\n\nexport default connector(HomePage);\n","import {\n  SAY_GOOD_MORNING,\n  SAY_GOOD_AFTERNOON,\n  SAY_GOOD_NIGHT,\n} from \"./actionTypes\";\n\nexport const sayGoodMorning = () => ({\n  type: SAY_GOOD_MORNING,\n});\nexport const sayGoodAfterNoon = () => ({\n  type: SAY_GOOD_AFTERNOON,\n});\nexport const sayGoodNight = () => ({\n  type: SAY_GOOD_NIGHT,\n});\n","import {\n  SAY_GOOD_MORNING,\n  SAY_GOOD_AFTERNOON,\n  SAY_GOOD_NIGHT,\n} from \"../actionTypes\";\nimport { GreetingStore, ReduxAction } from \"../redux-store.types\";\n\nconst generateGreeting = (type: string) => {\n  return `Hello. Good ${type}. Hope you are doing great`;\n};\n\nconst initialState: GreetingStore = {\n  message: generateGreeting(\"Morning\"),\n};\n\nconst GreetingReducer = (\n  state: GreetingStore = initialState,\n  action: ReduxAction\n) => {\n  switch (action.type) {\n    case SAY_GOOD_MORNING: {\n      return {\n        ...state,\n        message: generateGreeting(\"Morning\"),\n      };\n    }\n    case SAY_GOOD_AFTERNOON: {\n      return {\n        ...state,\n        message: generateGreeting(\"Afternoon\"),\n      };\n    }\n    case SAY_GOOD_NIGHT: {\n      return {\n        ...state,\n        message: generateGreeting(\"Night\"),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default GreetingReducer;\n","import { combineReducers } from \"redux\";\nimport greeting from \"./greeting\";\n\nexport default combineReducers({ greeting });\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nexport default createStore(rootReducer, composeWithDevTools());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/Home\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}